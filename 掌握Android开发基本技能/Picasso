# Picasso 简介
picasso是Square公司开源的一个Android图形缓存库，地址http://square.github.io/picasso/，可以实现图片下载和缓存功能。

基本使用方法：
```
	compile 'com.squareup.picasso:picasso:2.5.2'
```

加载图片的Java代码只需要简单的一行：

```
	Picasso.with(context).load("http://i.imgur.com/DvpvklR.png").into(imageView);  
```

主要有一下特性：
- 在adapter中回收和取消当前的下载；
- 使用最少的内存完成复杂的图形转换操作；
- 自动的内存和硬盘缓存；
- 图形转换操作，如变换大小，旋转等，提供了接口来让用户可以自定义转换操作；
- 加载载网络或本地资源；

# Picasso 与 Glide 对比

## 导入库
icasso和Glide都在jcenter上。在项目中添加依赖非常简单： Picasso

```
	dependencies {
	    compile 'com.squareup.picasso:picasso:2.5.1'
	}
```

Glide
```
	dependencies {
	    compile 'com.github.bumptech.glide:glide:3.5.2'
	    compile 'com.android.support:support-v4:22.0.0'
	}

```

## 基础（基本使用方法）

Picasso
```
	Picasso.with(context)
	    .load("http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg")
	    .into(ivImg);
```

Glide
```
	Glide.with(context)
	    .load("http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg")
	    .into(ivImg);
```

虽然两者看起来非常相似，但是 Glide 的代码无疑设计得更好，因为 Glide 的 with() 方法不光接受 Context，还接受 Activity 和 Fragment。此外，with() 方法还能自动地从你放入的各种东西里面提取出 Context，供它自己使用。

同 时将Activity/Fragment作为with()参数的好处是：图片加载会和Activity/Fragment的生命周期保持一致，比如 Paused状态在暂停加载，在Resumed的时候又自动重新加载。所以我建议传参的时候传递Activity 和 Fragment给Glide，而不是Context。


Glide加载的图片质量要差于Picasso, 因为Glide默认的Bitmap格式是RGB_565 ，比ARGB_8888格式的内存开销要小一半。

Picasso需要手动计算ImageView的大小，并使用如下方式：

```
	Picasso.with(this)
	    .load("http://nuuneoi.com/uploads/source/playstore/cover.jpg")
	    .resize(768, 432)
	    .into(ivImgPicasso);
```

或者对ImageView设置具体的尺寸大小（而不是wrap_content），则可以使用如下方法设置图片大小：

```
	Picasso.with(this)
	    .load("http://nuuneoi.com/uploads/source/playstore/cover.jpg")
	    .fit()
	    .centerCrop()
	    .into(ivImgPicasso);
```

而对于Glide，则可以自动计算出任意情况下的ImageView大小。

## 磁盘缓存
Picasso和Glide在磁盘缓存策略上有很大的不同。我们刚刚做了一个使用 Glide 和 Picasso 加载同一张高清图片的实验，我在实验后检查缓存目录时发现： Glide 缓存的图片和 ImageView 的尺寸相同，而 Picasso 缓存的图片和原始图片的尺寸相同。

尝试将ImageView调整成不同大小，但不管大小如何Picasso只缓存一个全尺寸的。Glide则不同，它会为每种大小的ImageView缓存 一次。尽管一张图片已经缓存了一次，但是假如你要在另外一个地方再次以不同尺寸显示，需要重新下载，调整成新尺寸的大小，然后将这个尺寸的也缓存起来。
具体说来就是：假如在第一个页面有一个200x200的ImageView，在第二个页面有一个100x100的ImageView，这两个ImageView本来是要显示同一张图片，却需要下载两次。

不过，你可以改变这种行为，让Glide既缓存全尺寸又缓存其他尺寸：

```
	Glide.with(this)
	     .load("http://nuuneoi.com/uploads/source/playstore/cover.jpg")
	     .diskCacheStrategy(DiskCacheStrategy.ALL)
	     .into(ivImgGlide);
```

下次在任何ImageView中加载图片的时候，全尺寸的图片将从缓存中取出，重新调整大小，然后缓存。Glide的这种方式优点是加载显示非常快。

## 特性

Image Resizing

```

	// Picasso
	.resize(300, 200);

	// Glide
	.override(300, 200);

```

Center Cropping

```

	// Picasso
	.centerCrop();

	// Glide
	.centerCrop();

```

Transforming

```

	// Picasso
	.transform(new CircleTransform())

	// Glide
	.transform(new CircleTransform(context))

```

设置占位图或者加载错误图：

```

	// Picasso
	.placeholder(R.drawable.placeholder)
	.error(R.drawable.imagenotfound)

	// Glide
	.placeholder(R.drawable.placeholder)
	.error(R.drawable.imagenotfound)

```


此外， Glide可以加载GIF动态图，而Picasso不能。

同时因为Glide和Activity/Fragment的生命周期是一致的，因此gif的动画也会自动的随着Activity/Fragment的状态暂停、重放。Glide 的缓存在gif这里也是一样，调整大小然后缓存。

但是从我的一次测试结果来看，用 Glide 显示动画会消耗很多内存，因此谨慎使用。

除了gif动画之外，Glide还可以将任意本地视频解码成一张静态图片。

还有一个特性是你可以配置图片显示的动画，而Picasso只有一种动画：fading in。

最后一个是可以使用thumbnail()产生一个你所加载图片的thumbnail。

其实还有一些特性，不过不是非常重要，比如将图像转换成字节数组等。 配置

有许多可以配置的选项，比如大小，缓存的磁盘位置，最大缓存空间，位图格式等等。可以在这个页面查看这些配置 Configuration 。