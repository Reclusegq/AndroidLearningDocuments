Butter Knife

## 1. 特性

1. 支持 Activity 中的 View 注入

2. 支持 View 中的 View 注入

3. 支持 View 事件回调函数注入
	
	支持的回调函数：

	- View: @OnLongClick and @OnFocusChanged.

	- TextView: @OnEditorAction.

	- AdapterView: @OnItemClick and @OnItemLongClick.

	- CompoundButton: @OnCheckedChanged.


在Activity 中注入

```
	class ExampleActivity extends Activity {
	  @InjectView(R.id.title) TextView title;
	  @InjectView(R.id.subtitle) TextView subtitle;
	  @InjectView(R.id.footer) TextView footer;
	 
	  @Override public void onCreate(Bundle savedInstanceState) {
	    super.onCreate(savedInstanceState);
	    setContentView(R.layout.simple_activity);
	    ButterKnife.inject(this);
	    // TODO Use "injected" views...
	  }
	}
```
在 Fragment 中注入
```
	public class FancyFragment extends Fragment {
	  @InjectView(R.id.button1) Button button1;
	  @InjectView(R.id.button2) Button button2;
	 
	  @Override View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
	    View view = inflater.inflate(R.layout.fancy_fragment, container, false);
	    ButterKnife.inject(this, view);
	    // TODO Use "injected" views...
	    return view;
	  }
	}
```
在 ViewHolder 模式中注入
```
	public class MyAdapter extends BaseAdapter {
	  @Override public View getView(int position, View view, ViewGroup parent) {
	    ViewHolder holder;
	    if (view != null) {
	      holder = (ViewHolder) view.getTag();
	    } else {
	      view = inflater.inflate(R.layout.whatever, parent, false);
	      holder = new ViewHolder(view);
	      view.setTag(holder);
	    }
	 
	    holder.name.setText("John Doe");
	    // etc...
	 
	    return convertView;
	  }
	 
	  static class ViewHolder {
	    @InjectView(R.id.title) TextView name;
	    @InjectView(R.id.job_title) TextView jobTitle;
	 
	    public ViewHolder(View view) {
	      ButterKnife.inject(this, view);
	    }
	  }
	}
```
注入回调函数
下面是几种注入回调函数的方法示例:
```
	// 带有 Button 参数
	@OnClick(R.id.submit)
	public void sayHi(Button button) {
	  button.setText("Hello!");
	}
	 
	// 不带参数
	@OnClick(R.id.submit)
	public void submit() {
	  // TODO submit data to server...
	}
	 
	// 同时注入多个 View 事件
	@OnClick({ R.id.door1, R.id.door2, R.id.door3 })
	public void pickDoor(DoorView door) {
	  if (door.hasPrizeBehind()) {
	    Toast.makeText(this, "You win!", LENGTH_SHORT).show();
	  } else {
	    Toast.makeText(this, "Try again", LENGTH_SHORT).show();
	  }
	}
```
Reset函数
如果需要在 界面 销毁的时候，把注入的 View 设置为 Null， 则可以用 reset 函数：
```
	public class FancyFragment extends Fragment {
	  @InjectView(R.id.button1) Button button1;
	  @InjectView(R.id.button2) Button button2;
	 
	  @Override View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
	    View view = inflater.inflate(R.layout.fancy_fragment, container, false);
	    ButterKnife.inject(this, view);
	    // TODO Use "injected" views...
	    return view;
	  }
	 
	  @Override void onDestroyView() {
	    super.onDestroyView();
	    Views.reset(this);
	  }
	}
```
另外 还支持 可选的 View 注入，如果该 View 没有，就没有吧：

```
@Optional @InjectView(R.id.might_not_be_there) TextView mightNotBeThere;
 
@Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {
  // TODO ...
}
```

还有两个 findViewById 函数来简化查找 View 的方式，如果上面都满足不了你的需求，你可以用用他们：
```
View view = LayoutInflater.from(context).inflate(R.layout.thing, null);
TextView firstName = Views.findById(view, R.id.first_name);
TextView lastName = Views.findById(view, R.id.last_name);
ImageView photo = Views.findById(view, R.id.photo);
```


在新版本中使用@Bind绑定View，不再使用@injectView，
此外，可以绑定资源
资源绑定
绑定资源到类成员上可以使用@BindBool、@BindColor、@BindDimen、@BindDrawable、@BindInt、@BindString。使用时对应的注解需要传入对应的id资源，例如@BindString你需要传入R.string.id_string的字符串的资源id。

View 列表
你可以一次性将多个views绑定到一个List或数组中：

```

@Bind({ R.id.first_name, R.id.middle_name, R.id.last_name })
List<EditText> nameViews;
```

使用这种绑定时，你可以使用apple函数。该函数相当于将在这个列表中每一个元素上进行调用：
```
ButterKnife.apply(nameViews, DISABLE);
ButterKnife.apply(nameViews, ENABLED, false);
```
